# Code Name: CSV Parameter Splitter for Vehicle-Cyclist Test Data
# Description: 
#   Splits a large CSV file containing vehicle-cyclist interaction data into multiple 
#   smaller CSVs based on parameter groups, preserving essential metadata columns.
# Author: [Your Name/Team Name]
# Application Scenarios: 
#   Post-processing of cyclist AEB test data for separate analysis of different parameter groups.
# Primary Input: 
#   - CSV file generated by CANMessage parser.
# Output: 
#   - Multiple CSV files named by parameter group and physical quantity (e.g., "_01_Longitude_Latitude.csv").

import pandas as pd
import os

def split_csv_combinations(input_file, output_dir):
    # 1. Read the original CSV file
    df = pd.read_csv(input_file, dtype=str, encoding='utf-8')
    total_cols = df.shape[1]
    print(f"Total columns in CSV: {total_cols}")

    # 2. Define column groups (numbered by processing order)
    groups = [
        [8, 9],    # 01
        [10],      # 02
        [11],      # 03
        [12,13,14], # 04
        [15,16],   # 05
        [17,18,19], # 06
        [20,21,22], # 07
        [23,24,25], # 08
        [26,27,28], # 09
        [29,30],   # 10
        [31,32],   # 11
        [33,34],   # 12
        [35,36],   # 13
        [37,38],   # 14
        [39,40],   # 15
    ]
    
    front7_indices = list(range(0, 7))

    # 3. International standard English naming mapping
    column_name_mapping = {
        "8_9": "Longitude_Latitude",
        "10": "Altitude",
        "11": "2D_Speed",
        "12_13_14": "3Axis_Angular_Acceleration",
        "15_16": "Longitudinal_Lateral_Velocity",
        "17_18_19": "3Axis_Linear_Acceleration",
        "20_21_22": "Longitudinal_Lateral_Slip_Acceleration",
        "23_24_25": "Heading_Pitch_Roll_Angle",
        "26_27_28": "3Axis_Angular_Rate",
        "29_30": "Longitudinal_Lateral_Angular_Rate",
        "31_32": "Distance",
        "33_34": "Local_XY_Position",
        "35_36": "Local_XY_Velocity",
        "37_38": "Local_Yaw_Track_Angle",
        "39_40": "Longitudinal_Lateral_Angular_Acceleration",
    }

    # 4. Define physical quantity order mapping (consistent with groups)
    physical_order_mapping = {
        "8_9": "01",
        "10": "02",
        "11": "03",
        "12_13_14": "04",
        "15_16": "05",
        "17_18_19": "06",
        "20_21_22": "07",
        "23_24_25": "08",
        "26_27_28": "09",
        "29_30": "10",
        "31_32": "11",
        "33_34": "12",
        "35_36": "13",
        "37_38": "14",
        "39_40": "15",
    }

    # 5. Extract original file name prefix
    file_prefix = os.path.splitext(os.path.basename(input_file))[0]

    # 6. Process each column group
    for group in groups:
        group_indices = [c-1 for c in group]
        all_indices = front7_indices + group_indices
        
        if max(all_indices) >= total_cols:
            print(f"Warning: Column indices for group {group} exceed range, skipping")
            continue
        
        sub_df = df.iloc[:, all_indices].copy()
        sub_df.iloc[:, 7:] = sub_df.iloc[:, 7:].replace(r'^\s*$', pd.NA, regex=True)
        sub_df = sub_df[sub_df.iloc[:, 7:].notna().any(axis=1)]
        sub_df.reset_index(drop=True, inplace=True)
        
        # Generate file name with order prefix
        group_str = "_".join(map(str, group))
        physical_name = column_name_mapping.get(group_str, "")
        order_prefix = physical_order_mapping.get(group_str, "00")  # Get two-digit order
        
        if physical_name:
            out_filename = f"{file_prefix}_{order_prefix}_{physical_name}.csv"
        else:
            out_filename = f"{file_prefix}_{order_prefix}_group{group_str}.csv"
        
        out_path = os.path.join(output_dir, out_filename)
        sub_df.to_csv(out_path, index=False, encoding='utf-8-sig')
        print(f"Output saved: {out_path}")

if __name__ == "__main__":
    # Replace with your input CSV file path
    input_file = r"Your_Path\Input_Data.csv"
    # Replace with your output directory path
    output_dir = r"Your_Path\Processed_Data"
    
    os.makedirs(output_dir, exist_ok=True)
    split_csv_combinations(input_file, output_dir)